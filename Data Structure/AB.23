###IN C++

class Solution {
  public:
    int findElement(vector<int> &arr) {
        int n = arr.size();
        if (n < 3) return -1;

        vector<int> leftMax(n, INT_MIN);
        vector<int> rightMin(n, INT_MAX);

        for (int i = 1; i < n; ++i) {
            leftMax[i] = max(leftMax[i - 1], arr[i - 1]);
        }

        for (int i = n - 2; i >= 0; --i) {
            rightMin[i] = min(rightMin[i + 1], arr[i + 1]);
        }

        for (int i = 1; i < n - 1; ++i) {
            if (leftMax[i] < arr[i] && arr[i] < rightMin[i]) {
                return arr[i];
            }
        }

        return -1;
        
    }
};



###IN JAVA


class Solution {
    public int findElement(int[] arr) {
        int n = arr.length;
        if (n < 3) return -1;

        int[] leftMax = new int[n];
        int[] rightMin = new int[n];
        leftMax[0] = Integer.MIN_VALUE;
        rightMin[n - 1] = Integer.MAX_VALUE;

        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], arr[i - 1]);
        }

        for (int i = n - 2; i >= 0; i--) {
            rightMin[i] = Math.min(rightMin[i + 1], arr[i + 1]);
        }

        for (int i = 1; i < n - 1; i++) {
            if (leftMax[i] < arr[i] && arr[i] < rightMin[i]) {
                return arr[i];
            }
        }

        return -1;
        
    }
}


###IN PYTHON3


class Solution:
    def findElement(self, arr):
        n = len(arr)
        if n < 3:
            return -1
    
        left_max = [-float('inf')] * n
        right_min = [float('inf')] * n
    
        for i in range(1, n):
            left_max[i] = max(left_max[i - 1], arr[i - 1])
    
        for i in range(n - 2, -1, -1):
            right_min[i] = min(right_min[i + 1], arr[i + 1])
    
        for i in range(1, n - 1):
            if left_max[i] < arr[i] < right_min[i]:
                return arr[i]
    
        return -1
    
        
