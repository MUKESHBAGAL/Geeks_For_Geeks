###IN C++


class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        vector<int> v1 = listToVector(l1);
        vector<int> v2 = listToVector(l2);

        reverse(v1.begin(), v1.end());
        reverse(v2.begin(), v2.end());

        vector<int> result = addVectors(v1, v2);

        reverse(result.begin(), result.end());

        return vectorToList(result);
    }

private:
    vector<int> listToVector(ListNode* head) {
        vector<int> result;
        while (head != nullptr) {
            result.push_back(head->val);
            head = head->next;
        }
        return result;
    }

    vector<int> addVectors(const vector<int>& v1, const vector<int>& v2) {
        int n = max(v1.size(), v2.size());
        vector<int> result;
        int carry = 0;

        for (int i = 0; i < n; ++i) {
            int num1 = (i < v1.size()) ? v1[i] : 0;
            int num2 = (i < v2.size()) ? v2[i] : 0;

            int sum = num1 + num2 + carry;
            result.push_back(sum % 10);
            carry = sum / 10;
        }

        if (carry > 0) {
            result.push_back(carry);
        }

        return result;
    }

    ListNode* vectorToList(const vector<int>& vec) {
        ListNode* dummy = new ListNode(0);
        ListNode* current = dummy;

        for (int num : vec) {
            current->next = new ListNode(num);
            current = current->next;
        }

        return dummy->next;
    }
};





###IN JAVA


class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        List<Integer> v1 = listToVector(l1);
        List<Integer> v2 = listToVector(l2);

        Collections.reverse(v1);
        Collections.reverse(v2);

        List<Integer> result = addVectors(v1, v2);

        Collections.reverse(result);

        return vectorToList(result);
    }

    private List<Integer> listToVector(ListNode head) {
        List<Integer> result = new ArrayList<>();
        while (head != null) {
            result.add(head.val);
            head = head.next;
        }
        return result;
    }

    private List<Integer> addVectors(List<Integer> v1, List<Integer> v2) {
        List<Integer> result = new ArrayList<>();
        int carry = 0;
        int n = Math.max(v1.size(), v2.size());

        for (int i = 0; i < n; i++) {
            int num1 = i < v1.size() ? v1.get(i) : 0;
            int num2 = i < v2.size() ? v2.get(i) : 0;

            int sum = num1 + num2 + carry;
            result.add(sum % 10);
            carry = sum / 10;
        }

        if (carry > 0) {
            result.add(carry);
        }

        return result;
    }

    private ListNode vectorToList(List<Integer> vec) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        for (int num : vec) {
            current.next = new ListNode(num);
            current = current.next;
        }

        return dummy.next;
    }
}
