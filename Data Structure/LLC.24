### IN C++


class Solution {
    static int countTriplets(Node head, int x) {
        List<Integer> arr = new ArrayList<>();
        Node temp = head;
        while (temp != null) {
            arr.add(temp.data);
            temp = temp.next;
        }

        int count = 0;
        int n = arr.size();

        for (int i = 0; i < n - 2; i++) {
            int target = x - arr.get(i);
            Set<Integer> seen = new HashSet<>();

            for (int j = i + 1; j < n; j++) {
                if (seen.contains(target - arr.get(j))) {
                    count++;
                }
                seen.add(arr.get(j));
            }
        }

        return count;
    }
}



### IN JAVA 

class Solution {
public:
    int countTriplets(struct Node* head, int x) {
        vector<int> arr;
        Node* temp = head;
        while (temp) {
            arr.push_back(temp->data);
            temp = temp->next;
        }

        int count = 0;
        int n = arr.size();

        for (int i = 0; i < n - 2; i++) {
            int target = x - arr[i];
            unordered_set<int> seen;
            for (int j = i + 1; j < n; j++) {
                if (seen.find(target - arr[j]) != seen.end()) {
                    count++;
                }
                seen.insert(arr[j]);
            }
        }

        return count;
    }
};
