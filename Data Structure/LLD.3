### IN C++

class Solution {
public:
    Node* reverseBetween(int a, int b, Node* head) {
        // Step 1: Store the linked list in a vector
        vector<int> ans;
        Node* temp = head;
        
        while (temp) {
            ans.push_back(temp->data);
            temp = temp->next;
        }
        
        // Step 2: Reverse the portion of the vector between indices a-1 and b-1
        reverse(ans.begin() + a - 1, ans.begin() + b);
        
        // Step 3: Rebuild the linked list with the modified data
        temp = head;
        int idx = 0;
        while (temp) {
            temp->data = ans[idx++];
            temp = temp->next;
        }

        return head;  // Return the modified head of the linked list
    }
};


### IN JAVA 

    */
class Solution {
    public Node reverseBetween(int a, int b, Node head) {
        // Step 1: Store the linked list in an array
       
       
        Node temp = head;
        int count=0;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        temp=head;
        int []ans=new int[count];
        int i=0;
        while (temp != null) {
            ans[i++]=temp.data;
            temp = temp.next;
        }

        // Step 2: Reverse the portion of the array between indices a-1 and b-1
        int left = a - 1, right = b - 1;
        while (left < right) {
            int tmp =ans[left];
            ans[left]=ans[right];
            ans[right]=tmp;
            left++;
            right--;
        }

        // Step 3: Rebuild the linked list with the modified values
        temp = head;
        int idx = 0;
        while (temp != null) {
            temp.data = ans[idx++];
            temp = temp.next;
        }

        return head; // Return the modified head of the linked list
    }
}
