###C++

class Solution {
  public:
    bool isIdentical(vector<int> &arr1, vector<int> &arr2) {
        // Check if sizes of the vectors are different
        if (arr1.size() != arr2.size()) {
            return false;
        }
        
        // Sort both vectors
        std::sort(arr1.begin(), arr1.end());
        std::sort(arr2.begin(), arr2.end());
        
        // Compare each element
        for (size_t i = 0; i < arr1.size(); i++) {
            if (arr1[i] != arr2[i]) {
                return false;
            }
        }
        
        return true;
    }
};



###JAVA

class Solution {
    public boolean isIdentical(List<Integer> arr1, List<Integer> arr2) {
        int n1 = arr1.size();
        int n2 = arr2.size();
        if (n1 != n2) {
            return false;
        }
        
        Collections.sort(arr1);
        Collections.sort(arr2);
        
        for (int i = 0; i < n1; i++) {
            if (!arr1.get(i).equals(arr2.get(i))) {
                return false;
            }
        }
        
        return true;
    }
}




###PYTHON

from collections import Counter
class Solution:
    def isIdentical(self, arr1, arr2):
        if len(arr1) != len(arr2):
            return False
        return Counter(arr1) == Counter(arr2)
