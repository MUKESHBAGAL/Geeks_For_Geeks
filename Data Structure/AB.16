###C++

// User function template for C++

class Solution {
public:
    int remove_duplicate(vector<int> &arr) {
        if (arr.empty()) return 0;

        int n = arr.size();
        int uniqueIndex = 0;

        for (int i = 1; i < n; i++) {
            if (arr[i] != arr[uniqueIndex]) {
                uniqueIndex++;
                arr[uniqueIndex] = arr[i];
            }
        }

        return uniqueIndex + 1;
    }
};



###JAVA


// User function Template for Java

class Solution {
    public int remove_duplicate(List<Integer> arr) {
        if (arr.isEmpty()) return 0;

        int uniqueIndex = 0;

        for (int i = 1; i < arr.size(); i++) {
            if (!arr.get(i).equals(arr.get(uniqueIndex))) {
                uniqueIndex++;
                arr.set(uniqueIndex, arr.get(i));
            }
        }

        return uniqueIndex + 1;
    }
}


###Python

class Solution:
    def remove_duplicate(self, arr):
        if not arr:
            return 0
        
        unique_index = 0

        for i in range(1, len(arr)):
            if arr[i] != arr[unique_index]:
                unique_index += 1
                arr[unique_index] = arr[i]

        return unique_index + 1

