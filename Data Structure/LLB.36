							### IN C++

class Solution {
  public:
    Node* pairWiseSwap(Node* head) {
        if (!head || !head->next) {
            return head;
        }

        Node* prev = head;
        Node* curr = head->next;
        head = curr;

        while (true) {
            Node* next = curr->next;
            curr->next = prev;

            if (!next || !next->next) {
                prev->next = next;
                break;
            }

            prev->next = next->next;
            prev = next;
            curr = next->next;
        }

        return head;
    }
};


							### IN JAVA
							

class Solution {
    // Function to pairwise swap elements of a linked list.
    // It should returns head of the modified list
    public Node pairwiseSwap(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node prev = head;
        Node curr = head.next;
        head = curr;

        while (true) {
            Node next = curr.next;
            curr.next = prev;

            if (next == null || next.next == null) {
                prev.next = next;
                break;
            }

            prev.next = next.next;
            prev = next;
            curr = next.next;
        }

        return head;
        
    }
}
