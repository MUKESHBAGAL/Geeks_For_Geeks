###C++
class Solution {
  public:
    vector<int> leaders(int n, int arr[]) {
        vector<int> value;
        int max_from_right = arr[n-1];
        value.push_back(max_from_right);
        
        for(int i = n - 2; i >= 0; i--) {
            if(arr[i] >= max_from_right) {
                value.push_back(arr[i]);
                max_from_right = arr[i];
            }
        }
        
        reverse(value.begin(), value.end());
        return value;
    }
};

###JAVA
class Solution {
    static ArrayList<Integer> leaders(int n, int arr[]) {
        ArrayList<Integer> leaders = new ArrayList<>();
        int maxFromRight = arr[n - 1];
        leaders.add(maxFromRight);

        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] >= maxFromRight) {
                leaders.add(arr[i]);
                maxFromRight = arr[i];
            }
        }

        Collections.reverse(leaders);
        return leaders;
    }
}

###Python

class Solution {
  public:
    vector<int> leaders(int n, int arr[]) {
        vector<int> value;
        int max_from_right = arr[n-1];
        value.push_back(max_from_right);
        
        for(int i = n - 2; i >= 0; i--) {
            if(arr[i] >= max_from_right) {
                value.push_back(arr[i]);
                max_from_right = arr[i];
            }
        }
        
        reverse(value.begin(), value.end());
        return value;
    }
};
