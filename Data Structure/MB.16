###IN C++

class Solution {
  public:
    vector<int> boundaryTraversal(vector<vector<int> >& mat) {
        vector<int> ans;
        int n = mat.size();
        int m = mat[0].size();

        for (int j = 0; j < m; j++)
            ans.push_back(mat[0][j]);

        for (int i = 1; i < n; i++)
            ans.push_back(mat[i][m - 1]);

        if (n > 1) {
            for (int j = m - 2; j >= 0; j--)
                ans.push_back(mat[n - 1][j]);
        }

        if (m > 1) {
            for (int i = n - 2; i > 0; i--)
                ans.push_back(mat[i][0]);
        }

        return ans;
    }
};




###IN JAVA

class Solution {
    static ArrayList<Integer> boundaryTraversal(int mat[][]) {
        ArrayList<Integer> ans = new ArrayList<>();
        int n = mat.length;
        int m = mat[0].length;

        for (int j = 0; j < m; j++)
            ans.add(mat[0][j]);

        for (int i = 1; i < n; i++)
            ans.add(mat[i][m - 1]);

        if (n > 1) {
            for (int j = m - 2; j >= 0; j--)
                ans.add(mat[n - 1][j]);
        }

        if (m > 1) {
            for (int i = n - 2; i > 0; i--)
                ans.add(mat[i][0]);
        }

        return ans;
    }
}



###IN PYTHON 

#User function Template for python3

class Solution:
    
    #Function to return list of integers that form the boundary 
    #traversal of the matrix in a clockwise manner.
    def BoundaryTraversal(self,mat):
        ans = []
        n = len(mat)
        m = len(mat[0])

        for j in range(m):
            ans.append(mat[0][j])

        for i in range(1, n):
            ans.append(mat[i][m - 1])

        if n > 1:
            for j in range(m - 2, -1, -1):
                ans.append(mat[n - 1][j])

        if m > 1:
            for i in range(n - 2, 0, -1):
                ans.append(mat[i][0])

        return ans
            
