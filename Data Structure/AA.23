###C++

class Solution {
  public:
    void segregateEvenOdd(vector<int>& arr) {
       int n=arr.size();
       vector<int> even;
        vector<int> odd;

        for (int i = 0; i < n; i++) {
            if (arr[i] % 2 == 0) {
                even.push_back(arr[i]);
            } else {
                odd.push_back(arr[i]);
            }
        }

        sort(even.begin(), even.end());
        sort(odd.begin(), odd.end());

        int index = 0;
        for (int num : even) {
            arr[index++] = num;
        }
        for (int num : odd) {
            arr[index++] = num;
        }
    }
};

###JAVA


class Solution {
    void segregateEvenOdd(int arr[]) {
        int[] even = new int[arr.length];
        int[] odd = new int[arr.length];
        
        int evenCount = 0;
        int oddCount = 0;
        
        for (int num : arr) {
            if (num % 2 == 0) {
                even[evenCount++] = num;
            } else {
                odd[oddCount++] = num;
            }
        }
        
        even = Arrays.copyOf(even, evenCount);
        odd = Arrays.copyOf(odd, oddCount);
        
        Arrays.sort(even);
        Arrays.sort(odd);
        
        int index = 0;
        for (int i = 0; i < even.length; i++) {
            arr[index++] = even[i];
        }
        for (int i = 0; i < odd.length; i++) {
            arr[index++] = odd[i];
        }
    }
}

###PYTHON
