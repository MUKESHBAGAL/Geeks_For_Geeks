###IN C

// User function Template for C
void leftRotate(int arr[], int d, int n) {
    if (n == 0) return;
    d = d % n;
    if (d == 0) return;

    int *temp = (int *)malloc(sizeof(int) * d);
    if (!temp) return;

    for (int i = 0; i < d; i++)
        temp[i] = arr[i];

    for (int i = 0; i < n - d; i++)
        arr[i] = arr[i + d];

    for (int i = 0; i < d; i++)
        arr[n - d + i] = temp[i];

    free(temp);
}


###IN C++


class Solution {
  public:
    void leftRotate(vector<int>& arr, int d) {
        if (arr.empty()) return; 
        if (d % arr.size() == 0)
            return;
            
        int n = arr.size();
        d = d % n;
        
        vector<int> temp(d);  
        for (int i = 0; i < d; i++) {
            temp[i] = arr[i]; 
        }

        for (int i = 0; i < n - d; i++) {
            arr[i] = arr[i + d];
        }

        for (int i = 0; i < d; i++) {
            arr[n - d + i] = temp[i];
        }
    }
};






###IN JAVA

// User function Template for Java

class Solution {
    void leftRotate(int arr[], int d) {
        // code here
        if (arr.length == 0) return;
        if (d % arr.length == 0) return;

        int n = arr.length;
        d = d % n;

        int[] temp = new int[d];
        for (int i = 0; i < d; i++) {
            temp[i] = arr[i];
        }

        for (int i = 0; i < n - d; i++) {
            arr[i] = arr[i + d];
        }

        for (int i = 0; i < d; i++) 
            arr[n - d + i] = temp[i];
    }
}




###PYTHON 

#User function Template for python3

class Solution:
    def leftRotate(self, arr, d):
        if not arr:
            return
        if d % len(arr) == 0:
            return
        
        n = len(arr)
        d = d % n

        temp = [0] * d
        for i in range(d):
            temp[i] = arr[i]

        for i in range(n - d):
            arr[i] = arr[i + d]

        for i in range(d):
            arr[n - d + i] = temp[i]


