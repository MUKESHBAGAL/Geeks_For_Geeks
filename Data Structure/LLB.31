							### IN C++

class Solution {
public:
    Node* findIntersection(Node* head1, Node* head2) {
        Node* temp = head1;
        Node* ptr = NULL;
        Node* head = NULL;
        Node* tail = NULL;

        while (temp) {
            ptr = head2;
            while (ptr) {
                if (temp->data == ptr->data) {
                    Node* newNode = new Node(temp->data);
                    if (!head) {
                        head = newNode;
                        tail = head;
                    } else {
                        tail->next = newNode;
                        tail = tail->next;
                    }
                    break;
                }
                ptr = ptr->next;
            }
            temp = temp->next;
        }

        return head;
    }
};




							### IN JAVA
							




// User function Template for Java

/* structure of list Node:

class Node
{
    int data;
    Node next;

    Node(int a)
        {
            data = a;
            next = null;
        }
}

*/

class Solution {
    // Function to find the intersection of two linked lists
    public Node findIntersection(Node head1, Node head2) {
        HashSet<Integer> set = new HashSet<>();
        Node temp = head2;
        
        while (temp != null) {
            set.add(temp.data);
            temp = temp.next;
        }

        Node head = null;
        Node tail = null;
        temp = head1;
        
        while (temp != null) {
            if (set.contains(temp.data)) {
                Node newNode = new Node(temp.data);
                if (head == null) {
                    head = newNode;
                    tail = head;
                } else {
                    tail.next = newNode;
                    tail = tail.next;
                }
            }
            temp = temp.next;
        }

        return head;
    }
}
