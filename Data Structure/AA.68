###IN C++

class Solution {
  public:
    int getOddOccurrence(vector<int>& arr) {
        sort(arr.begin(), arr.end());
        int count = 1; // Start counting current element

        for (int i = 1; i < arr.size(); i++) {
            if (arr[i] == arr[i-1]) {
                count++;
            } else {
                if (count % 2 == 1)
                    return arr[i-1];
                count = 1; // Reset for new element
            }
        }

        // Check last group
        if (count % 2 == 1)
            return arr.back();

        return -1; // If not found
    }
};


###IN JAVA

class Solution {
    // Method to find the element with odd occurrence in given array
    int getOddOccurrence(int[] arr) {
        Arrays.sort(arr);
        int count = 1;

        for (int i = 1; i < arr.length; i++) {
            if (arr[i] == arr[i - 1]) {
                count++;
            } else {
                if (count % 2 == 1) {
                    return arr[i - 1];
                }
                count = 1;
            }
        }
        if (count % 2 == 1) {
            return arr[arr.length - 1];
        }
        return -1;
        
    }
}


###PYTHON 

class Solution:
    def getOddOccurrence(self, arr):
        arr.sort()
        count = 1
    
        for i in range(1, len(arr)):
            if arr[i] == arr[i - 1]:
                count += 1
            else:
                if count % 2 == 1:
                    return arr[i - 1]
                count = 1
    
        if count % 2 == 1:
            return arr[-1]
        return -1
    



