### IN C++

class Solution {
  public:
    Node* sortedInsert(Node* head, int x) {
        Node* newNode = new Node();
        newNode->data = x;
        newNode->prev = NULL;
        newNode->next = NULL;
        
        if (!head || head->data >= x) {
            newNode->next = head;
            if (head) {
                head->prev = newNode;
            }
            return newNode;
        }
        
        Node* temp = head;
        
        while (temp->next && temp->next->data < x) {
            temp = temp->next;
        }
        
        newNode->next = temp->next;
        if (temp->next) {
            temp->next->prev = newNode;
        }
        temp->next = newNode;
        newNode->prev = temp;
        
        return head;
    }
};



### JAVA

class Solution {
    public Node sortedInsert(Node head, int x) {
        Node newNode = new Node(x);
        
        if (head == null || head.data >= x) {
            newNode.next = head;
            if (head != null) {
                head.prev = newNode;
            }
            return newNode;
        }
        
        Node temp = head;
        
        while (temp.next != null && temp.next.data < x) {
            temp = temp.next;
        }
        
        newNode.next = temp.next;
        if (temp.next != null) {
            temp.next.prev = newNode;
        }
        temp.next = newNode;
        newNode.prev = temp;
        
        return head;
    }
}
