###IN C++

// User function Template for C++

class Solution {
  public:
    vector<vector<int>> sortedMatrix(int N, vector<vector<int>> Mat) {
        vector<int> flattened;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                flattened.push_back(Mat[i][j]);
            }
        }

        sort(flattened.begin(), flattened.end());

        int index = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                Mat[i][j] = flattened[index++];
            }
        }

        return Mat;
        
    }
};



###IN JAVA


// User function Template for Java

class Solution {
    int[][] sortedMatrix(int N, int Mat[][]) {
        int[] flattened = new int[N * N];
        int idx = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                flattened[idx++] = Mat[i][j];
            }
        }

        Arrays.sort(flattened);

        idx = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                Mat[i][j] = flattened[idx++];
            }
        }

        return Mat;
        
    }
};


### IN PYTHON 

#User function Template for python3

class Solution:
    def sortedMatrix(self,N,Mat):
        flattened = []
        for i in range(N):
            for j in range(N):
                flattened.append(Mat[i][j])

        flattened.sort()

        index = 0
        for i in range(N):
            for j in range(N):
                Mat[i][j] = flattened[index]
                index += 1

        return Mat

