###IN C++

class Solution {
  public:
    vector<int> preorder(Node* root) {
        vector<int> ans;
        preorderHelper(root, ans);
        return ans;
    }

  private:
    void preorderHelper(Node* node, vector<int>& ans) {
        if (node == NULL)
            return;
        ans.push_back(node->data);
        preorderHelper(node->left, ans);
        preorderHelper(node->right, ans);
    }
};



###IN JAVA

class Solution {
    // Function to return a list containing the preorder traversal of the tree.
    static ArrayList<Integer> preorder(Node root) {
        List<Integer> ans = new ArrayList<>();
        preorderHelper(root, ans);
        return (ArrayList<Integer>) ans;  // Cast to ArrayList since return type is ArrayList
    }

    private static void preorderHelper(Node node, List<Integer> ans) {
        if (node == null)
            return;
        ans.add(node.data);
        preorderHelper(node.left, ans);
        preorderHelper(node.right, ans);
        
    }
}
