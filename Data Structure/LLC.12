### IN C++

class Solution {
  public:
    Node* intersectPoint(Node* head1, Node* head2) {
        if (!head1 || !head2) return nullptr;
        
        int len1 = 0, len2 = 0;
        Node* temp1 = head1;
        Node* temp2 = head2;
        
        while (temp1) {
            len1++;
            temp1 = temp1->next;
        }
        
        while (temp2) {
            len2++;
            temp2 = temp2->next;
        }
        
        int diff = abs(len1 - len2);
        
        temp1 = head1;
        temp2 = head2;
        
        if (len1 > len2) {
            for (int i = 0; i < diff; i++) {
                temp1 = temp1->next;
            }
        } else {
            for (int i = 0; i < diff; i++) {
                temp2 = temp2->next;
            }
        }
        
        while (temp1 && temp2) {
            if (temp1 == temp2) {
                return temp1;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        
        return nullptr;
    }
};



### IN JAVA 
class Solution {
    public Node intersectPoint(Node head1, Node head2) {
        if (head1 == null || head2 == null) return null;

        int len1 = 0, len2 = 0;
        Node temp1 = head1;
        Node temp2 = head2;

        while (temp1 != null) {
            len1++;
            temp1 = temp1.next;
        }

        while (temp2 != null) {
            len2++;
            temp2 = temp2.next;
        }

        int diff = Math.abs(len1 - len2);

        temp1 = head1;
        temp2 = head2;

        if (len1 > len2) {
            for (int i = 0; i < diff; i++) {
                temp1 = temp1.next;
            }
        } else {
            for (int i = 0; i < diff; i++) {
                temp2 = temp2.next;
            }
        }

        while (temp1 != null && temp2 != null) {
            if (temp1 == temp2) {
                return temp1;
            }
            temp1 = temp1.next;
            temp2 = temp2.next;
        }

        return null;
    }
}
