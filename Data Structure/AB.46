###IN C++

class Solution {
  public:
    long long int maximizeSum(long long int a[], int n, int k) {
        sort(a, a + n);
        for (int i = 0; i < n && k > 0; i++) {
            if (a[i] < 0) {
                a[i] = -a[i];
                k--;
            } else break;
        }
        if (k % 2 == 1) {
            sort(a, a + n);
            a[0] = -a[0];
        }
        long long int sum = 0;
        for (int i = 0; i < n; i++) sum += a[i];
        return sum;
    }
};


###IN JAVA

import java.util.Arrays;

class Solution {
    public static long maximizeSum(long a[], int n, int k) {
        Arrays.sort(a);
        for (int i = 0; i < n && k > 0; i++) {
            if (a[i] < 0) {
                a[i] = -a[i];
                k--;
            } else {
                break;
            }
        }
        if (k % 2 == 1) {
            Arrays.sort(a);
            a[0] = -a[0];
        }
        long sum = 0;
        for (long num : a) {
            sum += num;
        }
        return sum;
    }
}



###PYTHON 

class Solution:
    def maximizeSum(self, a, n, k):
        a.sort()
        i = 0
        while i < n and k > 0:
            if a[i] < 0:
                a[i] = -a[i]
                k -= 1
            else:
                break
            i += 1
        if k % 2 == 1:
            a.sort()
            a[0] = -a[0]
        return sum(a)




