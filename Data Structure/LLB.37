							### IN C++
							
class Solution {
public:
    pair<Node*, Node*> splitList(struct Node* head) {
        if (!head || !head->next) {
            return {head, head};
        }

        Node *slow = head, *fast = head;

        while (fast->next != head && fast->next->next != head) {
            slow = slow->next;
            fast = fast->next->next;
        }

        Node* head1 = head;
        Node* head2 = slow->next;

        slow->next = head1;

        Node* temp = head2;
        while (temp->next != head) {
            temp = temp->next;
        }

        temp->next = head2;

        return {head1, head2};
    }
};


							### IN JAVA
							

class Solution {
    public Pair<Node, Node> splitList(Node head) {
        if (head == null || head.next == head) {
            return new Pair<>(head, head);
        }

        Node slow = head, fast = head;

        while (fast.next != head && fast.next.next != head) {
            slow = slow.next;
            fast = fast.next.next;
        }

        Node head1 = head;
        Node head2 = slow.next;

        slow.next = head1;

        Node temp = head2;
        while (temp.next != head) {
            temp = temp.next;
        }
        temp.next = head2;

        return new Pair<>(head1, head2);
    }
}

