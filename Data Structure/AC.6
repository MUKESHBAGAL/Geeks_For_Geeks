###C++

class Solution {
public:
    int rowWithMax1s(vector<vector<int>> &arr) {
        int maxRowIndex = -1;
        int max1s = 0;
        int rowCount = arr.size();
        if (rowCount == 0) return -1;
        int colCount = arr[0].size();

        for (int i = 0; i < rowCount; i++) {
            int count = 0;
            for (int j = 0; j < colCount; j++) {
                if (arr[i][j] == 1) {
                    count++;
                }
            }
            if (count > max1s) {
                max1s = count;
                maxRowIndex = i;
            }
        }

        return maxRowIndex;
    }
};


###JAVA

class Solution {
    public int rowWithMax1s(int arr[][]) {
        int maxRowIndex = -1;
        int max1s = 0;
        int rowCount = arr.length;
        if (rowCount == 0) return -1;
        int colCount = arr[0].length;

        for (int i = 0; i < rowCount; i++) {
            int count = 0;
            for (int j = 0; j < colCount; j++) {
                if (arr[i][j] == 1) {
                    count++;
                }
            }
            if (count > max1s) {
                max1s = count;
                maxRowIndex = i;
            }
        }

        return maxRowIndex;
    }
}



###PYTHON

class Solution:
    def rowWithMax1s(self, arr):
        max_row_index = -1
        max_1s = 0
        row_count = len(arr)
        if row_count == 0:
            return -1
        col_count = len(arr[0])

        for i in range(row_count):
            count = 0
            for j in range(col_count):
                if arr[i][j] == 1:
                    count += 1
            if count > max_1s:
                max_1s = count
                max_row_index = i

        return max_row_index
