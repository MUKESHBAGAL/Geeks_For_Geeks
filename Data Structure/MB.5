###IN C

int* snakePattern(int n, int matrix[][n]) {
    int* ans = (int*)malloc(n * n * sizeof(int));
    int index = 0;

    for (int i = 0; i < n; i++) {
        if (i % 2 == 0) {
            for (int j = 0; j < n; j++) {
                ans[index++] = matrix[i][j];
            }
        } else {
            for (int j = n - 1; j >= 0; j--) {
                ans[index++] = matrix[i][j];
            }
        }
    }

    return ans;
}
 	


###IN C++

class Solution {
  public:
    vector<int> snakePattern(vector<vector<int>> matrix) {
        vector<int> ans;
        int n = matrix.size();
        
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                for (int j = 0; j < matrix[i].size(); j++) {
                    ans.push_back(matrix[i][j]);
                }
            } else {
                for (int j = matrix[i].size() - 1; j >= 0; j--) {
                    ans.push_back(matrix[i][j]);
                }
            }
        }
        
        return ans;
    }
};



###IN JAVA

class Solution {
    // Function to return list of integers visited in snake pattern in matrix.
    static ArrayList<Integer> snakePattern(int matrix[][]) {
        ArrayList<Integer> ans = new ArrayList<>();
        int n = matrix.length;
        
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                for (int j = 0; j < matrix[i].length; j++) {
                    ans.add(matrix[i][j]);
                }
            } else {
                for (int j = matrix[i].length - 1; j >= 0; j--) {
                    ans.add(matrix[i][j]);
                }
            }
        }
        
        return ans;
    }
}


###IN PYTHON

class Solution:
    
    #Function to return list of integers visited in snake pattern in matrix.
    def snakePattern(self, matrix): 
        ans = []
        for i in range(len(matrix)):
            if i % 2 == 0:
                ans.extend(matrix[i])
            else:
                ans.extend(matrix[i][::-1])
        return ans
    	

