###C++


class Solution
{
public:
    int minNumber(int arr[], int low, int high)
    {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] < arr[mid - 1] && arr[mid] < arr[mid + 1]) {
                return arr[mid];
            }
            if (arr[mid] > arr[high]) {
                low = mid + 1;
            }
            else {
                high = mid - 1;
            }
        }

        return arr[low];
    }
};





###JAVA

class Solution {
    static int minNumber(int arr[], int low, int high) {
        if (arr[low] <= arr[high]) {
            return arr[low];
        }
        
        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if mid is the minimum element
            if ((mid == 0 || arr[mid] < arr[mid - 1]) && (mid == arr.length - 1 || arr[mid] < arr[mid + 1])) {
                return arr[mid];
            }
            
            if (arr[mid] > arr[high]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return arr[low];
    }
}


###Python


class Solution:
    def minNumber(self, arr, low, high):
        while low <= high:
            mid = low + (high - low) // 2

            if (mid == 0 or arr[mid] < arr[mid - 1]) and (mid == len(arr) - 1 or arr[mid] < arr[mid + 1]):
                return arr[mid]
            
            if arr[mid] > arr[high]:
                low = mid + 1
            else:
                high = mid - 1
        
        return arr[low]



