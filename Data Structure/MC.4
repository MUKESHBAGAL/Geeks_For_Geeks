###IN C++

class Solution {
  public:
    vector<int> spirallyTraverse(vector<vector<int>> &matrix) {
        vector<int> result;
        if (matrix.empty()) return result;

        int top = 0, bottom = matrix.size();
        int left = 0, right = matrix[0].size();

        while (top < bottom && left < right) {
            for (int i = left; i < right; ++i)
                result.push_back(matrix[top][i]);
            top++;

            for (int i = top; i < bottom; ++i)
                result.push_back(matrix[i][right - 1]);
            right--;

            if (top < bottom) {
                for (int i = right - 1; i >= left; --i)
                    result.push_back(matrix[bottom - 1][i]);
                bottom--;
            }

            if (left < right) {
                for (int i = bottom - 1; i >= top; --i)
                    result.push_back(matrix[i][left]);
                left++;
            }
        }

        return result;
        
    }
};



###IN JAVA

class Solution {
    public ArrayList<Integer> spirallyTraverse(int[][] matrix) {
        ArrayList<Integer> result = new ArrayList<>();
        if (matrix.length == 0) return result;

        int top = 0, bottom = matrix.length;
        int left = 0, right = matrix[0].length;

        while (top < bottom && left < right) {
            for (int i = left; i < right; i++)
                result.add(matrix[top][i]);
            top++;

            for (int i = top; i < bottom; i++)
                result.add(matrix[i][right - 1]);
            right--;

            if (top < bottom) {
                for (int i = right - 1; i >= left; i--)
                    result.add(matrix[bottom - 1][i]);
                bottom--;
            }

            if (left < right) {
                for (int i = bottom - 1; i >= top; i--)
                    result.add(matrix[i][left]);
                left++;
            }
        }

        return result;
    }
}



###IN PYTHON

class Solution:
    def spirallyTraverse(self, matrix):
        result = []
        if not matrix:
            return result
        
        top, bottom = 0, len(matrix)
        left, right = 0, len(matrix[0])
        
        while top < bottom and left < right:
            for i in range(left, right):
                result.append(matrix[top][i])
            top += 1
        
            for i in range(top, bottom):
                result.append(matrix[i][right - 1])
            right -= 1
        
            if top < bottom:
                for i in range(right - 1, left - 1, -1):
                    result.append(matrix[bottom - 1][i])
                bottom -= 1
        
            if left < right:
                for i in range(bottom - 1, top - 1, -1):
                    result.append(matrix[i][left])
                left += 1
        
        return result
        
